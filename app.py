from flask import Flask, render_template, request, jsonify
import tensorflow as tf
import numpy as np
from PIL import Image
import io
import base64

app = Flask(__name__)

# Load AI Model
MODEL_PATH = "petvision_model.tflite"
interpreter = tf.lite.Interpreter(model_path=MODEL_PATH)
interpreter.allocate_tensors()

# Get Input & Output Tensors
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Define Class Labels
CLASS_LABELS = [
    "Cataract", "Cherry Eye", "Conjunctivitis", "Deep Corneal Ulcer",
    "Ectropion", "Entropion", "Glaucoma", "KCS (Dry Eye)", "Normal Eye", "Superficial Corneal Ulcer"
]

# Advice Dictionary
ADVICE_INFO = {
    "Superficial Corneal Ulcer": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕нр╕▓р╕Ир╣Ар╕Бр╕┤р╕Фр╕Ир╕▓р╕Бр╕Ър╕▓р╕Фр╣Ар╕Ир╣Зр╕Ъ, р╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б, р╕лр╕гр╕╖р╕нр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕н
                                    ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                                    р╕вр╕▓р╕лр╕вр╕нр╕Фр╕Хр╕▓р╕Ыр╕Пр╕┤р╕Кр╕╡р╕зр╕Щр╕░р╣Бр╕ер╕░р╕Хр╣Йр╕▓р╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯз┤
                                    р╕Бр╕▓р╕гр╣Гр╕Кр╣Й E-collar (р╕Ыр╕ер╕нр╕Бр╕Др╕нр╕Бр╕▒р╕Щр╣Ар╕ер╕╡р╕в) ЁЯж║
                                    р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╕Чр╕▓р╕Зр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕б (р╣Гр╕Щр╕Бр╕гр╕Ур╕╡р╣Бр╕Ьр╕ер╕ер╕╢р╕Б) ЁЯФм
                                    ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 1,000 - 3,500 р╕Ър╕▓р╕Ч""",
    "Conjunctivitis": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╣Ар╕Бр╕┤р╕Фр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕гр╕░р╕Др╕▓р╕вр╣Ар╕Др╕╖р╕нр╕З р╣Ар╕Кр╣Ир╕Щ р╕Эр╕╕р╣Ир╕Щ, р╕Др╕зр╕▒р╕Щ, р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕н
                        ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                        р╕вр╕▓р╕лр╕вр╕нр╕Фр╕Хр╕▓р╕Ыр╕Пр╕┤р╕Кр╕╡р╕зр╕Щр╕░ ЁЯТз
                        р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Ьр╣Йр╕▓р╕нр╕╕р╣Ир╕Щр╕Ыр╕гр╕░р╕Др╕Ър╕Кр╣Ир╕зр╕вр╕ер╕Фр╕нр╕▓р╕Бр╕▓р╕гр╕Ър╕зр╕б ЁЯдХ
                        р╕лр╕ер╕╡р╕Бр╣Ар╕ер╕╡р╣Ир╕вр╕Зр╕Эр╕╕р╣Ир╕Щр╕ер╕░р╕нр╕нр╕Зр╕лр╕гр╕╖р╕нр╕кр╕▓р╕гр╣Ар╕Др╕бр╕╡р╕Чр╕╡р╣Ир╕Бр╣Ир╕нр╣Гр╕лр╣Йр╣Ар╕Бр╕┤р╕Фр╕Бр╕▓р╕гр╕гр╕░р╕Др╕▓р╕вр╣Ар╕Др╕╖р╕нр╕З ЁЯЪл
                        ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 500 - 2,500 р╕Ър╕▓р╕Ч""",
    "Cataract": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕Юр╕▒р╕Щр╕Шр╕╕р╕Бр╕гр╕гр╕б, р╕Бр╕▓р╕гр╕Бр╕гр╕░р╕Чр╕Ър╕Бр╕гр╕░р╣Ар╕Чр╕╖р╕нр╕Щ, р╣Вр╕гр╕Др╣Ар╕Ър╕▓р╕лр╕зр╕▓р╕Щ
                ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                    р╕лр╕вр╕нр╕Фр╕вр╕▓р╕Вр╕вр╕▓р╕вр╕бр╣Ир╕▓р╕Щр╕Хр╕▓р╣Бр╕ер╕░р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯТК
                    р╕Бр╕▓р╕гр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕ер╕Щр╕кр╣Мр╕Хр╕▓ р╣Ар╕Ыр╣Зр╕Щр╕Чр╕▓р╕Зр╣Ар╕ер╕╖р╕нр╕Бр╕Чр╕╡р╣Ир╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф ЁЯПе
                ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 20,000 - 50,000 р╕Ър╕▓р╕Ч (р╕Вр╕╢р╣Йр╕Щр╕нр╕вр╕╣р╣Ир╕Бр╕▒р╕Ър╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╣Бр╕ер╕░р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╕кр╕▒р╕Хр╕зр╣М)""",
    "KCS (Dry Eye)": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕Бр╕▓р╕гр╕Ьр╕ер╕┤р╕Хр╕Щр╣Йр╕│р╕Хр╕▓р╕ер╕Фр╕ер╕З, р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕нр╣Ар╕гр╕╖р╣Йр╕нр╕гр╕▒р╕З
                        ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                            р╕лр╕вр╕нр╕Фр╕вр╕▓р╕Бр╕гр╕░р╕Хр╕╕р╣Йр╕Щр╕Бр╕▓р╕гр╕Ьр╕ер╕┤р╕Хр╕Щр╣Йр╕│р╕Хр╕▓ ЁЯТз
                            р╣Гр╕Кр╣Йр╕кр╕▓р╕гр╕лр╕ер╣Ир╕нр╕ер╕╖р╣Ир╕Щр╕Хр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯЫбя╕П
                            р╣Гр╕Щр╕Бр╕гр╕Ур╕╡р╕гр╕╕р╕Щр╣Бр╕гр╕З р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Чр╣Ир╕нр╕Щр╣Йр╕│р╕Хр╕▓ ЁЯПе
                        ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 800 - 5,000 р╕Ър╕▓р╕Ч""",
    "Glaucoma": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щр╕ер╕╣р╕Бр╕Хр╕▓р╕кр╕╣р╕З, р╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ър╕Вр╕нр╕Зр╕Хр╕▓р╕ар╕▓р╕вр╣Гр╕Щ
                ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                    р╕лр╕вр╕нр╕Фр╕вр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╕ер╕Фр╕Др╕зр╕▓р╕бр╕Фр╕▒р╕Щр╕Хр╕▓ ЁЯТК
                    р╕Бр╕гр╕Ур╕╡р╕гр╕╕р╕Щр╣Бр╕гр╕З р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕З р╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╕Бр╕│р╕Ир╕▒р╕Фр╕Хр╕▓р╕нр╕нр╕Б (Enucleation) ЁЯШЮ
                ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 2,500 - 15,000 р╕Ър╕▓р╕Ч (р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╕нр╕▓р╕Ир╕кр╕╣р╕Зр╕Цр╕╢р╕З 25,000 р╕Ър╕▓р╕Ч)""",
    "Ectropion": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕Юр╕▒р╕Щр╕Шр╕╕р╕Бр╕гр╕гр╕б, р╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╕Вр╕нр╕Зр╕Бр╕ер╣Йр╕▓р╕бр╣Ар╕Щр╕╖р╣Йр╕нр╕Хр╕▓
                    ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                        р╕лр╕вр╕нр╕Фр╕вр╕▓р╕Ыр╕Пр╕┤р╕Кр╕╡р╕зр╕Щр╕░р╣Бр╕ер╕░р╕Хр╣Йр╕▓р╕Щр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯз┤
                        р╣Гр╕Щр╕Бр╕гр╕Ур╕╡р╕гр╕╕р╕Щр╣Бр╕гр╕З р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕Чр╕│р╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╕▒р╕Зр╕Хр╕▓ тЬВя╕П
                    ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 1,500 - 10,000 р╕Ър╕▓р╕Ч""",
    "Entropion": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕лр╕Щр╕▒р╕Зр╕Хр╕▓р╕лр╕гр╕╖р╕нр╕Вр╕Щр╕бр╣Йр╕зр╕Щр╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╕Хр╕▓ р╕Чр╕│р╣Гр╕лр╣Йр╣Ар╕Бр╕┤р╕Фр╕Бр╕▓р╕гр╕гр╕░р╕Др╕▓р╕вр╣Ар╕Др╕╖р╕нр╕З
                    ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                        р╣Гр╕Кр╣Йр╕вр╕▓р╕лр╕вр╕нр╕Фр╕Хр╕▓р╕ер╕Фр╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯТз
                        р╣Гр╕Щр╕Бр╕гр╕Ур╕╡р╕гр╕╕р╕Щр╣Бр╕гр╕З р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕З р╕Чр╕│р╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕Щр╕▒р╕Зр╕Хр╕▓ ЁЯПе
                    ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 5,000 - 20,000 р╕Ър╕▓р╕Ч (р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Ф)""",
    "Cherry Eye": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╕Хр╣Ир╕нр╕бр╣Гр╕Хр╣Йр╕лр╕Щр╕▒р╕Зр╕Хр╕▓р╕Кр╕▒р╣Йр╕Щр╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕нр╕▒р╕Бр╣Ар╕кр╕Ър╣Бр╕ер╕░р╕Ыр╕ер╕┤р╣Йр╕Щр╕нр╕нр╕Бр╕бр╕▓
                        ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                            р╣Гр╕Кр╣Йр╕вр╕▓р╕лр╕вр╕нр╕Фр╕Хр╕▓р╕ер╕Фр╕нр╕▓р╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯТК
                            р╕лр╕▓р╕Бр╣Ар╕Ыр╣Зр╕Щр╕Цр╕▓р╕зр╕г р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕З р╕Ьр╣Ир╕▓р╕Хр╕▒р╕Фр╣Ар╕вр╣Зр╕Ър╕Хр╣Ир╕нр╕бр╕лр╕Щр╕▒р╕Зр╕Хр╕▓ тЬВя╕П
                        ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 3,500 - 12,000 р╕Ър╕▓р╕Ч (р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Ьр╣Ир╕▓р╕Хр╕▒р╕Ф)""",
    "Deep Corneal Ulcer": """ЁЯУМ р╕кр╕▓р╣Ар╕лр╕Хр╕╕: р╣Ар╕Бр╕┤р╕Фр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕нр╕лр╕гр╕╖р╕нр╕Ър╕▓р╕Фр╣Ар╕Ир╣Зр╕Ър╕гр╕╕р╕Щр╣Бр╕гр╕З
                            ЁЯУМ р╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓:
                                р╣Гр╕Кр╣Йр╕вр╕▓р╕лр╕вр╕нр╕Фр╕Хр╕▓р╕Ыр╕Пр╕┤р╕Кр╕╡р╕зр╕Щр╕░р╣Бр╕ер╕░р╕Хр╣Йр╕▓р╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Бр╣Ар╕кр╕Ъ ЁЯТз
                                р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕З р╣Ар╕вр╣Зр╕Ър╕лр╕Щр╕▒р╕Зр╕Хр╕▓р╕Кр╕▒р╣Йр╕Щр╕Чр╕╡р╣Ир╕кр╕▓р╕б р╣Ар╕Юр╕╖р╣Ир╕нр╕Кр╣Ир╕зр╕вр╣Гр╕лр╣Йр╣Бр╕Ьр╕ер╕кр╕бр╕▓р╕Щр╣Ар╕гр╣Зр╕зр╕Вр╕╢р╣Йр╕Щ ЁЯПе
                            ЁЯУМ р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ: 2,500 - 10,000 р╕Ър╕▓р╕Ч""",
    "Normal Eye": """ЁЯУМ р╣Др╕бр╣Ир╕бр╕╡р╕нр╕▓р╕Бр╕▓р╕гр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤
                    ЁЯУМ р╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Хр╕▓р╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ:
                        р╣Ар╕Кр╣Зр╕Фр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Хр╕▓р╕Фр╣Йр╕зр╕вр╕Щр╣Йр╕│р╣Ар╕Бр╕ер╕╖р╕н ЁЯУМ
                        р╕лр╕ер╕╡р╕Бр╣Ар╕ер╕╡р╣Ир╕вр╕Зр╕Бр╕▓р╕гр╣Гр╕лр╣Йр╕кр╕▒р╕Хр╕зр╣Мр╣Ар╕ер╕╡р╣Йр╕вр╕Зр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Чр╕╡р╣Ир╕бр╕╡р╕Эр╕╕р╣Ир╕Щр╕лр╕гр╕╖р╕нр╕кр╕▓р╕гр╣Ар╕Др╕бр╕╡ ЁЯЪл"""
}

# Function to preprocess image
def preprocess_image(image):
    image = image.convert("RGB").resize((224, 224))  # Ensure RGB format & Resize
    image = np.array(image) / 255.0   # Normalize
    image = np.expand_dims(image, axis=0).astype(np.float32)  # Add batch dimension
    return image

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        if 'file' in request.files:
            file = request.files['file']
            image = Image.open(io.BytesIO(file.read()))
        elif 'image' in request.json:
            image_data = request.json['image']
            image = Image.open(io.BytesIO(base64.b64decode(image_data.split(',')[1])))
        else:
            return jsonify({"error": "No image provided"}), 400

        processed_image = preprocess_image(image)

        # Run model inference
        interpreter.set_tensor(input_details[0]['index'], processed_image)
        interpreter.invoke()
        output_data = interpreter.get_tensor(output_details[0]['index'])

        # Get Top 3 Predictions
        top_indices = np.argsort(output_data[0])[::-1][:3]
        top_predictions = [{"label": CLASS_LABELS[i], "confidence": round(float(output_data[0][i]) * 100, 2), "advice": ADVICE_INFO[CLASS_LABELS[i]]} for i in top_indices]

        return jsonify({"predictions": top_predictions})

    except Exception as e:
        return jsonify({"error": f"Error processing image: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

